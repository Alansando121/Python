{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMVy5bAU8P4CDDnL5s3WcjI",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Alansando121/Python/blob/main/AISI-ACT-12\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "MENU\n",
        "\n",
        "1.- Agregar (automatico 10)\n",
        "\n",
        "2.- Eliminar {ID}\n",
        "\n",
        "3.- Imprimir lista ( tabla)\n",
        "\n",
        "4.- Buscar {ID}\n",
        "\n",
        "5.- Buscar {appat} todas las coincidencias\n",
        "\n",
        "6.- Ordenar {ID}\n",
        "\n",
        "7.- Generar archivo {ID} (preguntar nombre del archivo)\n",
        "\n",
        "   a) excel\n",
        "\n",
        " b) txt\n",
        "\n",
        " c) cvs\n",
        "\n",
        " d) MarkDown\n",
        "\n",
        "8.- Cargar archivo {ID}\n",
        "\n",
        "9.- Imprimir archivo {ID}\n",
        "\n",
        "10.- Borrar Toda la lista {ID}\n",
        "\n",
        "0.- SALIR\n",
        "\n",
        "\n",
        "\n",
        "NOTA: Los datos del diccionario son los Datos básicos de un trabajador de una fabrica.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "NOTA 2: VALIDAR EL PROGRAMA 100%\n",
        "\n",
        "Preguntar siempre si esta seguro eliminar, No ordenar si ya esta Ordenado, decir si lista vacía, no existe o mostrar si estala búsqueda, No se permiten ID repetidos\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "FksVAt5aCjoR"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7WoaWeMs8bEw",
        "outputId": "c9011e09-05b9-4fb9-d9e3-f511b4cc49b7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MENU\n",
            "1.- Agregar (automatico 10)\n",
            "2.- Eliminar {ID}\n",
            "3.- Imprimir lista (tabla)\n",
            "4.- Buscar {ID}\n",
            "5.- Buscar {appat} todas las coincidencias\n",
            "6.- Ordenar {ID}\n",
            "7.- Generar archivo {ID}\n",
            "   a) excel\n",
            "   b) txt\n",
            "   c) cvs\n",
            "   d) MarkDown\n",
            "8.- Cargar archivo {ID}\n",
            "9.- Imprimir archivo {ID}\n",
            "10.- Borrar Toda la lista {ID}\n",
            "0.- SALIR\n"
          ]
        }
      ],
      "source": [
        "from IPython.display import clear_output\n",
        "import random\n",
        "import pandas as pd\n",
        "import os\n",
        "\n",
        "# Simulated `dicionario` module for generating random employee data\n",
        "class dicionario:\n",
        "    @staticmethod\n",
        "    def registro():\n",
        "        nombres = [\"Luis\", \"Pedro\", \"Roberto\", \"Maria\", \"Lupita\", \"Abraham\", \"Carlos\", \"Juan\", \"Sonia\", \"Ana\", \"Sandra\", \"Tulio\", \"Vanessa\"]\n",
        "        ap_paternos = [\"Paredes\", \"Cota\", \"Herrera\", \"Gutierrez\", \"Casas\", \"Perez\", \"Sanchez\", \"Villalobos\", \"Huerta\"]\n",
        "        ap_maternos = [\"Chavez\", \"Herrera\", \"Huerta\", \"Sanchez\", \"Perez\", \"Villalobos\", \"Cota\", \"Paredes\", \"Gutierrez\"]\n",
        "        puestos = [\"Encargad@\", \"Gerente\", \"Supervisor\", \"Guardia\", \"Jefe\", \"Conserje\", \"Empleado Gral\"]\n",
        "        sexos = [\"HOMBRE\", \"MUJER\"]\n",
        "        return [\n",
        "            random.randint(1, 500),\n",
        "            random.choice(ap_paternos),\n",
        "            random.choice(ap_maternos),\n",
        "            random.choice(nombres),\n",
        "            random.choice(puestos),\n",
        "            random.choice(sexos)\n",
        "        ]\n",
        "\n",
        "# Initialize empty list to store data\n",
        "listadatos = []\n",
        "\n",
        "# Helper function to generate random data\n",
        "def agregar_automatico(cantidad=10):\n",
        "    claves = [\"Id\", \"Ap.Paterno\", \"Ap.Materno\", \"Nombre\", \"Puesto\", \"Sexo\"]\n",
        "    for _ in range(cantidad):\n",
        "        nuevo_registro = dict(zip(claves, dicionario.registro()))\n",
        "        # Check for duplicate IDs\n",
        "        if nuevo_registro[\"Id\"] not in [item[\"Id\"] for item in listadatos]:\n",
        "            listadatos.append(nuevo_registro)\n",
        "\n",
        "# Helper function to print DataFrame\n",
        "def imprimir_lista():\n",
        "    if not listadatos:\n",
        "        print(\"La lista está vacía.\")\n",
        "        return\n",
        "    df = pd.DataFrame(listadatos)\n",
        "    print(df)\n",
        "\n",
        "# Helper function to delete a record by ID\n",
        "def eliminar_id(id_eliminar):\n",
        "    global listadatos\n",
        "    listadatos = [item for item in listadatos if item[\"Id\"] != id_eliminar]\n",
        "\n",
        "# Helper function to find a record by ID\n",
        "def buscar_id(id_buscar):\n",
        "    for item in listadatos:\n",
        "        if item[\"Id\"] == id_buscar:\n",
        "            return item\n",
        "    return None\n",
        "\n",
        "# Helper function to find records by Apellido Paterno\n",
        "def buscar_appat(appat_buscar):\n",
        "    resultados = [item for item in listadatos if item[\"Ap.Paterno\"] == appat_buscar]\n",
        "    return resultados\n",
        "\n",
        "# Helper function to sort the list by ID\n",
        "def ordenar_por_id():\n",
        "    global listadatos\n",
        "    listadatos = sorted(listadatos, key=lambda x: x[\"Id\"])\n",
        "\n",
        "# Helper function to generate files\n",
        "def generar_archivo(id_buscar, tipo_archivo):\n",
        "    item = buscar_id(id_buscar)\n",
        "    if not item:\n",
        "        print(f\"No se encontró el registro con ID {id_buscar}.\")\n",
        "        return\n",
        "\n",
        "    df = pd.DataFrame([item])\n",
        "    nombre_archivo = input(\"Ingrese el nombre del archivo: \")\n",
        "\n",
        "    if tipo_archivo == \"excel\":\n",
        "        df.to_excel(f\"/content/drive/MyDrive/proyecto/{nombre_archivo}.xlsx\", index=False)\n",
        "    elif tipo_archivo == \"txt\":\n",
        "        with open(f\"/content/drive/MyDrive/proyecto/{nombre_archivo}.txt\", \"w\") as f:\n",
        "            f.write(str(item))\n",
        "    elif tipo_archivo == \"csv\":\n",
        "        df.to_csv(f\"/content/drive/MyDrive/proyecto/{nombre_archivo}.csv\", index=False)\n",
        "    elif tipo_archivo == \"markdown\":\n",
        "        df.to_markdown(f\"/content/drive/MyDrive/proyecto/{nombre_archivo}.md\", index=False)\n",
        "    print(f\"Archivo {tipo_archivo} generado como {nombre_archivo}.{tipo_archivo}\")\n",
        "\n",
        "# Helper function to load a CSV file by ID\n",
        "def cargar_archivo(id_buscar):\n",
        "    path = f\"/content/drive/MyDrive/proyecto/{id_buscar}.csv\"\n",
        "    if os.path.exists(path):\n",
        "        df = pd.read_csv(path)\n",
        "        print(df)\n",
        "    else:\n",
        "        print(f\"No se encontró el archivo con ID {id_buscar}.\")\n",
        "\n",
        "# Helper function to print the content of a text file by ID\n",
        "def imprimir_archivo(id_buscar):\n",
        "    path = f\"/content/drive/MyDrive/proyecto/{id_buscar}.txt\"\n",
        "    if os.path.exists(path):\n",
        "        with open(path, \"r\") as f:\n",
        "            contenido = f.read()\n",
        "        print(contenido)\n",
        "    else:\n",
        "        print(f\"No se encontró el archivo con ID {id_buscar}.\")\n",
        "\n",
        "# Main menu function\n",
        "def menu():\n",
        "    while True:\n",
        "        clear_output(wait=True)\n",
        "        print(\"MENU\")\n",
        "        print(\"1.- Agregar (automatico 10)\")\n",
        "        print(\"2.- Eliminar {ID}\")\n",
        "        print(\"3.- Imprimir lista (tabla)\")\n",
        "        print(\"4.- Buscar {ID}\")\n",
        "        print(\"5.- Buscar {appat} todas las coincidencias\")\n",
        "        print(\"6.- Ordenar {ID}\")\n",
        "        print(\"7.- Generar archivo {ID}\")\n",
        "        print(\"   a) excel\")\n",
        "        print(\"   b) txt\")\n",
        "        print(\"   c) cvs\")\n",
        "        print(\"   d) MarkDown\")\n",
        "        print(\"8.- Cargar archivo {ID}\")\n",
        "        print(\"9.- Imprimir archivo {ID}\")\n",
        "        print(\"10.- Borrar Toda la lista {ID}\")\n",
        "        print(\"0.- SALIR\")\n",
        "\n",
        "        opcion = input(\"Seleccione una opción: \")\n",
        "\n",
        "        if opcion == \"1\":\n",
        "            agregar_automatico()\n",
        "            print(\"10 registros agregados.\")\n",
        "        elif opcion == \"2\":\n",
        "            id_eliminar = int(input(\"Ingrese el ID a eliminar: \"))\n",
        "            if buscar_id(id_eliminar):\n",
        "                seguro = input(\"¿Está seguro que desea eliminar? (s/n): \")\n",
        "                if seguro.lower() == \"s\":\n",
        "                    eliminar_id(id_eliminar)\n",
        "                    print(f\"Registro con ID {id_eliminar} eliminado.\")\n",
        "            else:\n",
        "                print(\"ID no encontrado.\")\n",
        "        elif opcion == \"3\":\n",
        "            imprimir_lista()\n",
        "        elif opcion == \"4\":\n",
        "            id_buscar = int(input(\"Ingrese el ID a buscar: \"))\n",
        "            resultado = buscar_id(id_buscar)\n",
        "            if resultado:\n",
        "                print(resultado)\n",
        "            else:\n",
        "                print(\"ID no encontrado.\")\n",
        "        elif opcion == \"5\":\n",
        "            appat_buscar = input(\"Ingrese el Apellido Paterno a buscar: \")\n",
        "            resultados = buscar_appat(appat_buscar)\n",
        "            if resultados:\n",
        "                df = pd.DataFrame(resultados)\n",
        "                print(df)\n",
        "            else:\n",
        "                print(\"No se encontraron coincidencias.\")\n",
        "        elif opcion == \"6\":\n",
        "            if not listadatos:\n",
        "                print(\"La lista está vacía, no se puede ordenar.\")\n",
        "            else:\n",
        "                ordenar_por_id()\n",
        "                print(\"Lista ordenada por ID.\")\n",
        "        elif opcion == \"7\":\n",
        "            id_buscar = int(input(\"Ingrese el ID para generar archivo: \"))\n",
        "            if buscar_id(id_buscar):\n",
        "                tipo_archivo = input(\"Seleccione el tipo de archivo (excel/txt/csv/markdown): \").lower()\n",
        "                if tipo_archivo in [\"excel\", \"txt\", \"csv\", \"markdown\"]:\n",
        "                    generar_archivo(id_buscar, tipo_archivo)\n",
        "                else:\n",
        "                    print(\"Tipo de archivo no válido.\")\n",
        "            else:\n",
        "                print(\"ID no encontrado.\")\n",
        "        elif opcion == \"8\":\n",
        "            id_buscar = input(\"Ingrese el ID del archivo a cargar: \")\n",
        "            cargar_archivo(id_buscar)\n",
        "        elif opcion == \"9\":\n",
        "            id_buscar = input(\"Ingrese el ID del archivo a imprimir: \")\n",
        "            imprimir_archivo(id_buscar)\n",
        "        elif opcion == \"10\":\n",
        "            seguro = input(\"¿Está seguro que desea borrar toda la lista? (s/n): \")\n",
        "            if seguro.lower() == \"s\":\n",
        "                listadatos.clear()\n",
        "                print(\"Lista borrada.\")\n",
        "        elif opcion == \"0\":\n",
        "            print(\"Saliendo...\")\n",
        "            break\n",
        "        else:\n",
        "            print(\"Opción no válida.\")\n",
        "\n",
        "        input(\"Presione Enter para continuar...\")\n",
        "\n",
        "# Run the menu\n",
        "menu()\n"
      ]
    }
  ]
}